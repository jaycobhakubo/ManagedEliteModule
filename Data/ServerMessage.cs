// This is an unpublished work protected under the copyright laws of the
// United States and other countries.  All rights reserved.  Should
// publication occur the following will apply:  © 2007 GameTech
// International, Inc.

using System;
using System.IO;
using System.Globalization;

namespace GTI.Modules.Shared
{
    /// <summary>
    /// An enumeration of the possible generic error codes returned from 
    /// GTIServer.
    /// </summary>
    public enum GTIServerReturnCode
    {
        Success                     = 0,
        GeneralError                = -1,
        ServerBusy                  = -2,
        ParamError                  = -3,
        SQLError                    = -4,
        UnauthorizedAction          = -5,
		StringLengthError		    = -6,
        ErrorStartingTrans          = -8,
        ErrorCommitingTrans         = -9,
        ErrorRollbackTrans          = -10,
        ErrorUpdatingTable          = -11,
        ErrorWritingFile            = -12,
        MulticastError              = -13,
        ConnectFailure              = -14,
        ResultsPending              = -15,
        NoPendingRequest            = -16,
        DuplicateTableEntry         = -17,
        MissingTableEntry           = -18,
        UnableToAccessDatabase      = -19,
        MsgHandlerNotFound          = -20,
        InsufficientRights          = -21,
        MissingStoredProcedure      = -22,
        AllocMemoryFailure          = -25,
        CentralServerCommError      = -32,
        CardSalesUnavailable        = -33, // Rally DE4225
        InUse                       = -86, // FIX: DE3188 support new error code
        InsufficientPoints          = -88,
        InsufficientInventory       = -94, // Rally US1283

		// I added these to handle message response errors
		InvalidResonseSize		= -100,
		ServerCommError			= -101,
        AccountLocked           = -106,
        PasswordReuseError      = -107
	}

    /// <summary>
    /// An enumeration of the message id values used to communicate with the server
    /// Should correspond to message id values #DEFINEd in gti-gametech\Dev\DLLs\GTIStd\ServerMessageIDs.h 
    /// If/when the two lists disagree, ServerMessageIDs.h should be seen as the definitive reference.
    /// </summary>
    public enum GTIServerMessageId : int
    {
        //                  Module Ranges
        //  Bingo Module                 6000   -  6999
        //  Player Module                8000   -  8999
        //  Management Module           18000   - 18999
        //  RNG Module                  19000   - 19999
        //  Credit Module               20000   - 20999
        //  Accrual Module              21000   - 21999
        //  Security Module             25000   - 25999
        //  Slots Module                26000   - 26999
        //  Linked Bingo Central Module 27000   - 27999
        //  Linked Bingo Local Module   28000   - 28999
        //  Poker Module                29000   - 29999
        //  Keno Module                 30000   - 30999
        //  System Events               31000   - 31999
        //  UK Module                   32000   - 32999
        //  BlackJack Module            33000   - 33999
        //  AT2 Module                  34000   - 34999
        //  Test Module                 35000   - 35999
        //  Inventory Module            36000   - 36999
        //  Money Module                37000   - 37999
        //  Update Module               38000   - 38999
        //  B3 Module                   39000   - 39999
        //  Bingo Monitor Module        40000   - 40999 ** Future Module
        //  System Validation Module    41000   - 41999 ** Future Module
        //  Auto Bingo Module           42000   - 42999 ** Future Module
        //  Linked Session Bingo Module 43000   - 43999


        /* BingoMessages Bingo Module Message */
        BINGO_EXIST = 6000,
        BINGO_GET_PERM_LIST = 6001,
        BINGO_GET_VERIFIED_BINGO_LIST = 6002,
        BINGO_GET_CARD_TYPE_LIST = 6003,
        BINGO_CREATE_CBB_CARD = 6004,
        BINGO_GET_WINNING_CARD_LIST = 6005,
        BINGO_GET_BINGO_CARD_DATA = 6006,
        BINGO_GET_MACHINE_SALES_INFO = 6007,
        BINGO_SET_SESSION_GAME_PATTERN = 6008,
        BINGO_ADD_PACK_TO_MACHINE = 6009,
        BINGO_SWITCH_PLAY_TYPE = 6010,
        BINGO_START_GAME = 6011,
        BINGO_END_GAME = 6012,
        BINGO_SET_CURRENT_GAME = 6013,
        BINGO_CALL_MULTIPLE_BALLS = 6014,
        BINGO_GET_CARD_COUNT_BY_PACK = 6015,
        BINGO_GET_BALL_CALL_LIST = 6016,
        BINGO_VERIFY_CARD = 6017,
        BINGO_GET_CARD_FACE = 6018,
        BINGO_ADD_BINGO_CARD_SALES = 6019,
        BINGO_GET_GAME_CARDS = 6020,
        BINGO_SET_PROGRAM_GAME_INACTIVE = 6021,
        BINGO_GET_PROGRAM_GAME_DATA = 6022,
        BINGO_MOVE_PROGRAM_GAME = 6023,
        BINGO_SET_PROGRAM_DATA = 6024,
        BINGO_SET_PROGRAM_GAME_DATA = 6025,
        BINGO_GET_GAME_TYPES_LIST = 6026,
        BINGO_START_SESSION = 6027,
        BINGO_END_SESSION = 6028,
        BINGO_GET_CUR_SESSION = 6029,
        BINGO_SET_PROGRAM_ACTIVE_STATUS = 6030,
        BINGO_GET_CARD_LEVEL_DATA = 6031,
        BINGO_SET_CARD_LEVEL_DATA = 6032,
        BINGO_GET_CARD_ORIENTATION_DATA = 6033,
        BINGO_GET_CARD_MEDIA_DATA = 6034,
        BINGO_GET_ASSIGNED_SESSIONS = 6035,
        BINGO_GET_DOWNLOAD_DATA = 6036,
        BINGO_GET_SESSION_GAME_PLAYERS_CARDS = 6037,
        BINGO_GET_CURRENT_GAME = 6038,
        BINGO_SET_GAME_PATTERN_STATE = 6039,
        BINGO_GET_SESSIONS_FOR_OVERRIDE = 6040,
        BINGO_GET_ACTIVE_PERM_LIST = 6041,
        BINGO_GET_CURRENT_SESSION_LIST = 6042,
        BINGO_GET_SESSION_GAMES_LIST = 6043,
        BINGO_ASSIGN_SESSION = 6044,
        BINGO_LOCK_UNLOCK_SESSION_GAME = 6045,
        BINGO_GET_GLOBAL_PATTERNS = 6046,
        BINGO_SET_GLOBAL_PATTERNS = 6047,
        BINGO_SET_BINGO_VERIFY_STATUS = 6048,
        BINGO_VERIFICATION_COMPLETE = 6049,
        BINGO_GET_SESSION_GAMES_SUMMARY_LIST = 6050,
        BINGO_GET_CBB_CARD_FACE = 6051,
        BINGO_GET_RF_GAME_STATE_DATA = 6052,
        BINGO_REOPEN_SESSION = 6053,
        BINGO_GET_PAPER_START_NUMS = 6054,
        BINGO_CHECK_PAPER_PACKS = 6055,
        BINGO_SET_MACHINE_PAPER_START_NUMS = 6056,
        BINGO_FORCE_REPLICATION = 6057,
        BINGO_GET_SESSION_COST_ITEMS = 6058,
        BINGO_SET_SESSION_COST_ITEM = 6059,
        BINGO_REFRESH_GAME_STATE_BROADCAST = 6060,
        BINGO_ADD_SESSION_SUMMARY = 6061,
        BINGO_GET_SESSION_SUMMARY = 6062,
        BINGO_GET_CALCULATED_SESSION_SUMMARY = 6063,
        BINGO_CLOSE_ALL_SESSIONS = 6064,
        BINGO_GET_CARDS_BY_PACK = 6065,
        BINGO_GET_PATLIB_MD5 = 6066,
        BINGO_GET_PATLIB_DATA = 6067,
        BINGO_SET_ACTIVE_SALES_SESSION = 6068,
        BINGO_GET_SOLD_PACKS = 6069,
        BINGO_GET_MANUFACTURER_PERM_FILES = 6070,
        BINGO_GET_CURRENT_PROGRAM_DATA = 6071,
        BINGO_SET_BONUS_BALL_DATA = 6072,
        BINGO_GET_BONUS_BALL_DATA = 6073,
        BINGO_GET_BINGO_GAME_WINNERS = 6074,
        BINGO_GET_CURRENT_PROGRAM_DATA_RF = 6075,
        BINGO_GET_CARDSET_LEVEL_DATA = 6076,
        BINGO_SET_CARDSET_LEVEL_DATA = 6077,
        BINGO_SET_NEXT_GAME_BALL = 6078,
        BINGO_GET_DAY_SESSION_LIST = 6079,
        BINGO_GET_SESSION_GAME_HISTORY = 6080,
        BINGO_GET_LINEAR_GAME_NUMBERS = 6081,
        BINGO_SET_BALL_RACK_STATE = 6082,
        BINGO_SET_BONUS_BALL_STATE = 6083,
        BINGO_GET_SESSION_SUMMARY_BANKS = 6084,
        BINGO_GET_SESSION_GAME_MAX_CARD_LIMITS = 6085,
        BINGO_SET_IGNORE_ROW_STATE = 6086,
        BINGO_SET_ACTIVE_KIOSK_SESSION = 6087,
        BINGO_GET_ACTIVE_KIOSK_SESSION = 6088,
        BINGO_SET_BONUS_BALL_CONFIG = 6089,
        BINGO_GET_BONUS_BALL_CONFIG = 6090,
        BINGO_SET_PROGRAM_BONUS_BALL_CONFIG = 6091,
        BINGO_GET_PROGRAM_BONUS_BALL_CONFIG = 6092,
        BINGO_GET_PLAYED_BONUS_BALL_CONFIG = 6093,
        BINGO_NOTIFY_MENU_CHANGED = 6094,
        BINGO_GET_PRESALES_MAX_CARD_LIMITS = 6095,
        BINGO_GET_CARD_POSITIONS_MAPS = 6096,
        BINGO_SET_CARD_POSITIONS_MAP_INFO = 6097,
        BINGO_GET_STAR_CODE_INFO = 6098,
        BINGO_REMOVE_CARD_POSITIONS_MAP = 6099,
        BINGO_SET_CARD_POSITIONS_MAP_SEQ = 6100,
        BINGO_FINALIZE_CARD_POSITIONS_MAP = 6101,
        // ??? = 6102, // Check for expired receipts
        BINGO_SET_PRECALL_DEFINITION = 6103,
        BINGO_GET_PRECALL_DEFINITION = 6104,

        /* Player Module */
        PLAYER_EXIST = 8000,
        PLAYER_LOG_ON_MACHINE = 8001,
        PLAYER_LOG_OFF_MACHINE = 8002,
        PLAYER_IS_LOGGED_IN = 8003,
        //Removed 8004,
        PLAYER_GET_SETTINGS = 8005,
        PLAYER_SET_SETTINGS = 8006,
        PLAYER_UPDATE_TERMINAL_STATUS = 8007,
        PLAYER_IS_TERMINAL_LOCKED = 8008,
        PLAYER_GET_DATA = 8009,
        PLAYER_SET_DATA = 8010,
        //Removed 8011,
        PLAYER_FIND_BY_MAG_CARD = 8012,
        PLAYER_INCREMENT_VISIT = 8013,
        PLAYER_GET_LIST = 8014,
        //PLAYER_GET_ID = 8015, // TA5129 - Not called
        PLAYER_GET_PACKS = 8016,
        PLAYER_CARD_SWIPE = 8017,
        PLAYER_GET_TIER_LIST = 8018,
        PLAYER_TRACKING_LOG_OUT = 8019,
        PLAYER_GET_PICTURE = 8020,
        PLAYER_SET_PICTURE = 8021,
        PLAYER_ASSIGN_RECEIPT = 8022,
        PLAYER_GET_RECEIPTS = 8023,
        PLAYER_GET_PLAYER_STATUS_LIST = 8024,
        PLAYER_SET_PLAYER_STATUS_LIST = 8025,
        PLAYER_GET_PLAYER_STATUS_CODE = 8026,
        PLAYER_SET_PLAYER_STATUS_CODE = 8027,
        PLAYER_GET_PLAYER_FROM_MAC = 8028,
        PLAYER_GET_LAST_MODULE = 8029,
        PLAYER_SET_LAST_MODULE = 8030,
        PLAYER_SEND_MACHINE_PLAYER = 8031,
        PLAYER_GET_LIST_REPORT = 8032,
        PLAYER_GET_FAVORITE_NUMBERS_LIST = 8033,
        PLAYER_GET_ADDRESS_DATA_LIST = 8034,
        PLAYER_GET_PLAYER_CONFIG = 8035,
        PLAYER_SET_PLAYER_CONFIG = 8036,
        PLAYER_SET_PLAYER_LIST_DEFINITION = 8037,
        PLAYER_GET_PLAYER_LIST_DEFINITION = 8038,
        PLAYER_GET_MAG_CARD_PIN = 8039,
        PLAYER_SET_MAG_CARD_PIN = 8040,
        PLAYER_DELTA_PLAYER_POINTS = 8041,
        PLAYER_POINTS_PURGE = 8042,

        //PLAYER_GET_CARDS moved to SN with the server initialed messages.

        /* Management Module Messages */
        MGMT_EXIST = 18000,
        MGMT_SYSTEM_PARAMETERS = 18001,
        MGMT_SYSTEM_OFFLINE = 18002,
        MGMT_COUNT_MACHINES_IN_USE = 18003,
        MGMT_SEND_PLAY_TYPE_SWITCH = 18004,
        MGMT_SET_CUR_PROGRAM_LIST = 18005,
        MGMT_SEND_NEW_GAMING_DATE = 18006,
        MGMT_GET_MENU_LIST = 18007,
        MGMT_GET_MENU_DAILY_BUTTON_LIST = 18008,
        MGMT_ADD_POS_SALE = 18009,
        MGMT_GET_SALE = 18010,
        MGMT_VOID_RECEIPT = 18011,
        MGMT_CRATE_CATALOG_DATA = 18012,
        MGMT_QUANTITY_VOID = 18013,
        MGMT_UNLOCK_PACKS = 18014,
        MGMT_GET_SYSTEM_VERSION = 18015,
        MGMT_TRANSFER_PACK = 18016,
        MGMT_GET_CUR_GAMING_DATE = 18017,
        MGMT_FINISH_POS_SALE = 18018,
        MGMT_STAFF_LOG_IN = 18019,
        MGMT_STAFF_LOG_OFF = 18020,
        MGMT_GET_PAYOUT_CATEGORY_DATA = 18021,
        MGMT_GET_STAFF_OPERATOR_LIST = 18022,
        MGMT_GET_STAFF_DATA = 18023,
        MGMT_GET_SYSTEM_TIME = 18024,
        MGMT_GET_MACHINE_SETTINGS = 18025,
        MGMT_SET_PLAYER_UNIT_SWITCHES = 18026,
        MGMT_SEND_MENUS = 18027,
        MGMT_GET_DEVICE_TYPE_LIST = 18028,
        MGMT_SET_MACHINE_DEVICE_TYPE = 18029,
        MGMT_GET_SERVER_PORTS = 18030,
        MGMT_SET_PAYOUT_CATEGORY_DATA = 18031,
        MGMT_COMP_RAFFLE = 18032,
        MGMT_GET_ACTIVE_PLAYER_COMPS = 18033,
        MGMT_REDEEM_PLAYER_COMP = 18034,
        MGMT_RUN_PLAYER_RAFFLE = 18035,
        MGMT_CLEAR_PLAYER_RAFFLE = 18036,
        MGMT_GET_PLAYER_RAFFLE_PARTICIPANTS = 18037,
        MGMT_GET_LAST_RAFFLE_WINNER = 18038,
        //TA1640 - Raffle status no longer needed; can run raffle whenever they want back-to-back
        MGMT_GET_CONFIG_PHOTO_TYPES = 18039,
        MGMT_GET_STAFF_MENUS = 18040,
        MGMT_GET_PACKAGE_PRODUCTS = 18041,
        MGMT_GET_AUDIT_TYPES = 18042,
        MGMT_GET_PAYOUT_SCHEDULE_DATA = 18043,
        MGMT_GET_ACTIVE_DISCOUNTS = 18044,
        MGMT_GET_DEVICE_HARDWARE_ATTRIBUTES = 18045,
        MGMT_GET_POSITION_DATA = 18046,
        MGMT_GET_COMPANY_DATA = 18047,
        MGMT_SET_STAFF = 18048,
        MGMT_UPDATE_COMPANY_DATA = 18049,
        MGMT_GET_ADDRESS_DATA = 18050,
        MGMT_UPDATE_ADDRESS_DATA = 18051,
        MGMT_GET_CURRENT_OPERATOR = 18052,
        MGMT_GET_OPERATOR_DATA_COMPLETE = 18053,
        MGMT_SET_OPERATOR_DATA_COMPLETE = 18054,
        MGMT_GET_LOCATION_DATA = 18055,
        MGMT_SET_LOCATION_DATA = 18056,
        MGMT_GET_OPERATOR_SETTING_DATA = 18057,
        MGMT_SET_OPERATOR_SETTING_DATA = 18058,
        MGMT_GET_STAFF_POSITION_DATA = 18059,
        MGMT_SET_POSITION_DATA = 18060,
        MGMT_SET_STAFF_POSITION = 18061,
        MGMT_GET_DEVICE_MODULES = 18062,
        MGMT_GET_POSITION_MODULES = 18063,
        MGMT_SET_POSITION_MODULES = 18064,
        MGMT_GET_POSITION_MODULE_FEATURES = 18065,
        MGMT_SET_POSITION_MODULE_FEATURES = 18066,
        MGMT_SET_MACHINE_DATA = 18067,
        MGMT_CASH_OUT_PLAYER = 18068,
        MGMT_GET_PRODUCT_TYPES = 18069,
        MGMT_GET_SALES_SOURCES = 18070,
        MGMT_GET_GAME_CATEGORIES = 18071,
        MGMT_GET_PLAYER_TIER_DATA = 18072,
        MGMT_SET_PLAYER_TIER_DATA = 18073,
        MGMT_GET_EXTENDED_PROGRAM_LIST = 18074,
        MGMT_GET_PRODUCT_DATA = 18075,
        MGMT_SET_PRODUCT_DATA = 18076,
        MGMT_DEL_PRODUCT_DATA = 18077,
        MGMT_GET_PACKAGE_DATA = 18078,
        MGMT_SET_PACKAGE_DATA = 18079,
        MGMT_DEL_PACKAGE_DATA = 18080,
        MGMT_GET_PACKAGE_PRODUCT_DATA = 18081,
        MGMT_SET_PACKAGE_PRODUCT_DATA = 18082,
        MGMT_GET_GAME_PERSISTENT_DATA = 18083,
        MGMT_SET_GAME_PERSISTENT_DATA = 18084,
        MGMT_SET_PAYOUT_SCHEDULE_DATA = 18085,
        MGMT_SET_OPERATOR_DEVICE_FEES = 18086,
        MGMT_GET_CASH_METHOD_DATA = 18087,
        MGMT_SET_MACHINE_SETTINGS = 18088,
        MGMT_SET_MENU_DATA = 18089,
        MGMT_SET_MENU_BUTTONS = 18090,
        MGMT_SET_DISCOUNT_DATA = 18091,
        MGMT_SET_REPORT_IMAGE_DATA = 18092,
        MGMT_GET_REPORT_IMAGE_DATA = 18093,
        MGMT_GET_PORTABLE_UNITS_SOLD = 18094,
        MGMT_REMOVE_PROGRAM_CALENDAR = 18095,
        MGMT_GET_MENU_PROGRAMS = 18096,
        MGMT_GET_PROGRAM_CALENDAR_DATA = 18097,
        MGMT_SET_PROGRAM_CALENDAR_DATA = 18098,
        MGMT_REMOVE_POS_MENU = 18099,
        MGMT_GET_SYSTEM_SETTINGS = 18100,
        MGMT_GET_REPORT_LIST = 18101,
        MGMT_GET_REPORT = 18102,
        MGMT_GET_MENU_BUTTON_LIST = 18103,
        MGMT_FIND_PLAYER_OR_STAFF = 18104,
        MGMT_GET_NEXT_AVAIL_STAFF_LOGIN = 18105,
        MGMT_FIND_RECEIPT_DATA = 18106,
        MGMT_GET_SESSION_NUMBER_LIST = 18107,
        MGMT_GET_RECEIPT_CARD_LEVELS = 18108,
        MGMT_GET_USER_REPORT_LIST = 18109,
        MGMT_SET_USER_REPORT_LIST = 18110,
        MGMT_SET_GAME_CATEGORY_DATA = 18111,
        MGMT_FIND_RECEIPTID = 18112,
        MGMT_GET_FUNCTIONS_DATA = 18113,
        MGMT_GET_ASSIGNED_MACHINES = 18114,
        MGMT_GET_UNASSIGNED_MACHINES = 18115,
        MGMT_SET_ASSIGN_MACHINE = 18116,
        MGMT_SET_UNASSIGN_MACHINE = 18117,
        MGMT_SET_MACHINE_SETTINGS_EX = 18118,
        MGMT_SET_GLOBAL_SETTINGS = 18119,
        MGMT_GET_UNPAID_PAYOUTS = 18120,
        MGMT_PROCESS_PAYOUTS = 18121,
        MGMT_GET_AVAILABLE_GAMING_MODULE_DATA = 18122,
        MGMT_SET_GAMING_MODULE_SETTINGS = 18123,
        MGMT_GET_PAYOUT_SETTINGS = 18124,
        MGMT_SET_PAYOUT_SETTINGS = 18125,
        MGMT_UNLOCK_PAYOUT_MACHINE = 18126,
        MGMT_FIND_MACHINE = 18127,
        MGMT_UPDATE_MACHINE = 18128,
        MGMT_GET_REPORT_LIST_EX = 18129,
        MGMT_SET_MACHINE_OPERATOR = 18130,
        MGMT_SET_MACHINE_UNIT_NO = 18131,
        MGMT_GET_BUTTON_GRAPHICS = 18132,
        MGMT_GET_COLOR = 18133,
        MGMT_SET_COLOR = 18134,
        MGMT_DELETE_COLOR = 18135,
        MGMT_CHECK_MAX_CARDS = 18136,
        MGMT_GET_MENU_TYPES = 18137,
        MGMT_GET_PROGRESSIVE_DEFS = 18138,
        MGMT_SET_PROGRESSIVE_DEFS = 18139,
        MGMT_GET_GAME_MEDIA = 18140,
        MGMT_SET_GAME_MEDIA = 18141,
        MGMT_DELETE_GAME_MEDIA = 18142,
        MGMT_GET_WILD_DEFS = 18143,
        MGMT_GET_WILD_SETTINGS = 18144,
        MGMT_SET_WILD_SETTINGS = 18145,
        MGMT_DELETE_WILD_SETTINGS = 18146,
        MGMT_GET_CURRENCY_TYPES = 18147,
        MGMT_GET_GAME_CURRENCY = 18148,
        MGMT_SET_GAME_CURRENCY = 18149,
        MGMT_DELETE_GAME_CURRENCY = 18150,
        MGMT_GET_GAME_SETTING = 18151,
        MGMT_SET_GAME_SETTING = 18152,
        MGMT_GET_GAME_ELIGIBILITY = 18153,
        MGMT_SET_GAME_ELIGIBILITY = 18154,
        MGMT_DELETE_GAME_ELIGIBILITY = 18155,
        MGMT_FORCE_LOGOUT_MACHINES = 18156,
        MGMT_GET_MOTIFS = 18157,
        MGMT_SET_MOTIFS = 18158,
        MGMT_GET_CONFIG_PHOTO = 18159,
        MGMT_SET_CONFIG_PHOTO = 18160,
        MGMT_GET_SCENES = 18161,
        MGMT_GET_UNIQUE_GAME_SETTINGS = 18162,
        MGMT_GET_CHANNELS = 18163,
        MGMT_GET_PACKAGES_FOR_PRODUCT = 18164,
        MGMT_DELETE_GAME_SETTING = 18165,
        MGMT_GET_PRODUCT_GROUPS = 18166,
        MGMT_SET_PRODUCT_GROUPS = 18167,
        MGMT_GET_RAFFLE_INFO = 18168,
        MGMT_GET_MACHINE_PACKS = 18169,
        MGMT_GET_MONTHLY_SALES = 18170,
        MGMT_GET_MONTHLY_BINGO_SALES = 18171,
        MGMT_GET_MONTHLY_OTHER_SALES = 18172,
        MGMT_SET_MONTHLY_SALES = 18173,
        MGMT_SET_KIOSK_OPERATOR = 18174,
        MGMT_GET_KIOSK_OPERATOR = 18175,
        MGMT_GET_DAILY_SALES = 18176,
        MGMT_SET_DAILY_SALES = 18177,
        MGMT_SET_CURRENT_OPERATOR = 18178,
        MGMT_GET_ACCRUAL_OVERRIDE_SETTINGS = 18179,
        MGMT_GET_PERM_RANGES = 18180,
        MGMT_GET_CARD_CUTS = 18181,
        MGMT_GET_PAPER_LAYOUT_DATA = 18182,
        MGMT_SET_PAPER_LAYOUT_DATA = 18183,
        MGMT_GET_PAPER_LAYOUT_LIST = 18184,
        MGMT_SET_ACCRUAL_OVERRIDE_SETTINGS = 18185,
        MGMT_SET_MACHINE_CAPS = 18186,
        MGMT_GET_MACHINE_CAPS = 18187,
        MGMT_SET_REMOTE_DISPLAY_CONFIG = 18188,
        MGMT_GET_REMOTE_DISPLAY_CONFIG = 18189,
        MGMT_SET_ACCRUAL_DISPLAY_ITEMS = 18190,
        MGMT_GET_ACCRUAL_DISPLAY_ITEMS = 18191,
        MGMT_GET_POSITION_LIST = 18192,
        MGMT_CHANGE_STAFF_PASSWORD = 18193,
        MGMT_CHANGE_PASSWORD = 18194,
        MGMT_GET_MACHINE_STATUS_FOR_STAFF = 18195,
        MGMT_FORCE_STAFF_LOGOUT = 18196,
        MGMT_GET_PRODUCT_LIST = 18197,
        MGMT_SET_CHARITY_DATA = 18198,
        MGMT_GET_CHARITY_DATA = 18199,
        MGMT_GET_SESSION_CHARITY_DATA = 18200,
        MGMT_MOVE_STAFF_RECEIPTS = 18201,
        MGMT_DECODE_BARCODE = 18202,
        MGMT_SHUT_DOWN_MACHINE = 18203,
        MGMT_TURN_ON_MACHINE = 18204,
        MGMT_GET_PLAYER_DEVICE_GAMES = 18205,
        MGMT_SET_DEVICE_MODULES = 18206,
        //18207 & 18208 are reserved for a different project
        MGMT_GET_RAFFLE_DEFINITIONS = 18209,
        MGMT_SET_RAFFLE_DEFINITIONS = 18210,
        MGMT_SET_COMP_DEFINITIONS = 18211,
        MGMT_GET_COMP_DEFINITIONS = 18212,
        MGMT_AWARD_PLAYER_COMP = 18213,
        MGMT_CHECK_SERIAL_AUDIT_NUMBERS = 18214,
        MGMT_DELETE_PLAYER_COMP = 18215,
        MGMT_SET_RECEIPT_PIN = 18216,
        MGMT_GET_RECEIPT_PIN = 18217,
        MGMT_SET_DEFAULT_VALIDATION_PACKAGE = 18218,
        MGMT_GET_DEFAULT_VALIDATION_PACKAGE = 18219,
        MGMT_GET_VALIDATION_BY_RECEIPT = 18220,
        MGMT_SET_CHANNELS = 18221,
        MGMT_GET_ALLOW_FOR_FUN_GAMES = 18222,
        MGMT_MODIFY_CHANNELS = 18223,
        MGMT_SET_MACHINE_SERIAL = 18224,
        MGMT_AWARD_AUTO_PLAYER_COMPS = 18225,
        MGMT_GET_SESSION_PLAYED_LIST = 18226,
        MGMT_ADD_SALE_TENDER = 18227,
        MGMT_ADD_BLOWER_LOG_ENTRY = 18228,
        MGMT_ADD_CLIENT_DATA_STORE = 18229,
        MGMT_GET_CLIENT_DATA_STORE = 18230,
        MGMT_GET_SALE_TENDERS = 18231,
        MGMT_GET_PLAYER_DISCOUNTS_AWARDED = 18232,
        MGMT_GET_SET_RECEIPT_TEXT = 1823,
        MGMT_GET_REPEAT_SALE_INFO = 1823,
        MGMT_RESOLVE_SALE_TENDER = 1823,
        MGMT_UPDATE_DAILY_BUTTON_DATA = 18236,
        MGMT_SET_PHOTO = 18237,
        MGMT_GET_PHOTO = 18238,

        //                  *** RESERVED ***            18239,
        MGMT_MONETARY_DRAWING_GET_DEFINITIONS = 18240,
        MGMT_MONETARY_DRAWING_SET_DEFINITION = 18241,
        MGMT_MONETARY_DRAWING_EXECUTE_DRAWING = 18242,
        MGMT_GET_DEVICE_SETTINGS = 18243,

        MGMT_SET_DEVICE_SETTINGS = 18244,
        MGMT_WHEEL_DRAWING_GET_DEFINITIONS = 18245,
        MGMT_WHEEL_DRAWING_SET_DEFINITION = 18246,
        MGMT_WHEEL_DRAWING_EXECUTE_DRAWING = 18247,
        MGMT_GET_SCAN_CODES = 18248,
        MGMT_ADD_REMOVE_FIND_SCAN_CODE = 18249,
        MGMT_GET_PAPER_SALE_RECEIPT_INFO = 1825,
        MGMT_GET_SCHEDULES_SALES = 1825,
        MGMT_WAGERING_ACCT_PURCHASE = 18252,
        MGMT_LOAD_REPORT_DATA = 18253,
        MGMT_LOAD_REMOTE_RNG_TYPES = 18254,
        MGMT_LOAD_REMOTE_RNG_SETTINGS = 18255,
        MGMT_SET_REMOTE_RNG_SETTINGS = 18256,
        MGMT_GET_PRESALE_MENUS = 18257,
        MGMT_IMPORT_REPORT = 18258,
        MGMT_GET_CBB_INFO_FROM_TRANSACTION = 1825,
        MGMT_SET_REPORT_DATA = 18260,
        MGMT_GET_FLASHBOARD_THEMES = 18261,
        MGMT_GET_PROMO_TEXT = 1826,
        MGMT_SET_PROMO_TEXT = 1826,
        MGMT_ADD_TO_AUDIT_LOG = 1826,
        MGMT_REMOVE_PLAYER_COMP = 18265,
        MGMT_GET_GENERAL_DRAWING_DATA = 18266,
        MGMT_SET_GENERAL_DRAWING_DATA = 18267,
        MGMT_GET_GENERAL_DRAWING_EVENT_DATA = 18268,
        MGMT_SET_GENERAL_DRAWING_EVENT_DATA = 18269,
        MGMT_GENERATE_GENERAL_DRAWING_EVENTS = 18270,
        MGMT_EXECUTE_GENERAL_DRAWING_EVENT = 18271,
        MGMT_SET_GENERAL_DRAWING_EVENT_CANCELLED = 18272,
        MGMT_INITIATE_GENERAL_DRAWING_EVENT_RESULTS_NOTIFICATIONS = 18273,
        MGMT_ABORT_GENERAL_DRAWING_EVENT_RESULTS_NOTIFICATIONS = 18274,

        RNG_EXIST = 19000,
        RNG_GENERATOR_RUNNING = 19001,
        RNG_GET_NUMBER = 19002,
        RNG_GET_NUMBER_IN_RANGE = 19003,
        RNG_SHUFFLE_NUMBERS = 19004,


        /* Credit Module Messages */
        CREDIT_EXIST = 20000,
        CREDIT_GET_CREDIT = 20001,
        CREDIT_PURGE_CREDIT = 20002,
        CREDIT_DELTA_CREDIT = 20003,
        CREDIT_GET_PLAYER_ACCOUNT_LIST = 20004,

        /* Accrual Module Messages */
        ACCRUAL_EXIST = 21000,
        ACCRUAL_GET_ACCOUNTS = 21001,
        ACCRUAL_SET_ACCRUAL_ACCOUNT = 21002,
        ACCRUAL_INCREASE = 21003,
        ACCRUAL_RESEED_ACCOUNT = 21004,
        ACCRUAL_GET_ACCRUALS_PENDING_RESEED = 21005,
        ACCRUAL_RESET_BALANCES = 21006,
        ACCRUAL_TRANSFER_FUNDS = 21007,
        ACCRUAL_INSTANT_INCREASE = 21008,
        ACCRUAL_INSTANT_DECREASE = 21009,
        ACCRUAL_GET_INCREASE_DATA = 21010,
        ACCRUAL_AUTOMATIC_INCREASE = 21011,
        ACCRUAL_GET_RESEED_DATA = 21012,
        ACCRUAL_GET_TRANS_DETAIL_DATA = 21013,
        // ACCRUAL_ADD_SUPER_PICK_SALES = #####,
        // ACCRUAL_PAY_SUPER_PICK_WINNERS = #####,
        // ACCRUAL_GET_LAST_SUPER_PICK_WINNERS = #####,

        ACC2_GET_CONFIGURATION = 21101,
        ACC2_GET_ACCOUNT_DATA = 21102,
        ACC2_GET_ACCRUAL_DATA = 21103,
        ACC2_SET_CONFIGURATION = 21104,
        ACC2_CALC_RESEED_DATA = 21105,
        ACC2_RESEED_ACCOUNT = 21106,
        ACC2_GET_TRANSACTION = 21107,
        ACC2_SET_TRANSACTION = 21108,
        ACC2_CHECK_INCREASE_EXISTS = 21109,
        ACC2_CHECK_INCREASE_REVERSIBLE = 21110,
        ACC2_CALC_INCREASE_TRANSACTION = 21111,
        ACC2_GET_ACCRUALSESSIONPLAYED = 21112,
        ACC2_GET_TRANSACTIONS = 21113,
        ACC2_AUTO_INCREASE = 21114,
        ACC2_VOID_TRANSACTIONS = 21115,
        ACC2_GET_ACCOUNT_STATS = 21116,

        /* Security Module Messages */
        SECURITY_EXIST = 25000,
        SECURITY_GET_MACHINE_MODULE_LIST = 25001,
        SECURITY_SET_MACHINE_DESCRIPTION = 25002,
        SECURITY_GET_MACHINE_DESCRIPTION = 25003,
        SECURITY_GET_MACHINE_DATA = 25004,
        SECURITY_SET_MACHINE_STATE = 25005,
        SECURITY_GET_MACHINE_MODULES = 25006,
        SECURITY_GET_MODULES_BY_MACHINE = 25007,
        SECURITY_GET_MODULE_DATA = 25008,
        SECURITY_GET_STAFF_MODULE_FEATURES = 25009,
        SECURITY_GET_STAFF_MODULES = 25010,
        SECURITY_GET_MODULE_FEATURES = 25011,
        //TA7856 - License file values going another way, remove
        // SECURITY_GET_SYSTEM_FEATURES = #####,
        SECURITY_GET_GAME_MODULE_DATA = 25013,
        SECURITY_GET_HALL_DATA = 25014,
        SECURITY_SET_HALL_DATA = 25015,
        SECURITY_GET_LICENSE_FILE_SETTINGS = 25016,
        SECURITY_GET_DISTRIBUTOR_DEVICE_FEES = 25017,
        SECURITY_SET_DISTRIBUTOR_DEVICE_FEES = 25018,
        SECURITY_DELETE_DISTRIBUTOR_DEVICE_FEES = 25019,
        SECURITY_UNLOCK_MACHINE = 25020,

        /* Slots Module Messages */
        SLOTS_EXIST = 26000,
        SLOTS_GET_SLOT_GAME_LIST = 26001,
        SLOTS_GET_SLOT_GAME_DATA = 26002,
        SLOTS_SET_SLOT_GAME_AVAILABILITY = 26003,
        SLOTS_PLAY_SLOT = 26004,
        SLOTS_GET_GAME_DEF = 26005,
        SLOTS_GET_GAME_AVAILABILITY = 26006,
        SLOTS_GET_LAST_PLAY = 26007,
        SLOT_SET_BONUS_GAME_PLAYED_STATUS = 26008,
        SLOT_GET_BONUS_GAME_PLAYED_STATUS = 26009,

        /* Linked Bingo Central Module */
        LB_VERIFY_CONNECTION = 27000,
        LB_GET_PERM_RANGE = 27001,
        LB_GET_CUR_GAME = 27002,
        LB_GET_BUY_OPTIONS = 27003,
        LB_SET_CARDS_PURCHASED_SUMMARY = 27004,
        LB_SET_CARDS_PURCHASED_FULL = 27005,
        LB_GET_CUR_PROGRESSIVE_WIN_AMOUNT = 27006,
        // Central Managemnt messages which will be ignored if the requesting client isn't verified as a valid management client
        LB_MGMNT_GET_CUR_CONNECTIONS = 27200,
        LB_MGMNT_GET_EDIT_SETTINGS = 27201,
        LB_MGMNT_SET_EDIT_SETTINGS = 27202,
        LB_MGMNT_GET_PATTERN_SCHEDULE = 27203,
        LB_MGMNT_SET_PATTERN_SCHEDULE = 27204,
        LB_MGMNT_GET_PRICING_DATA = 27205,
        LB_MGMNT_SET_PRICING_DATA = 27206,
        // Return Notify Messages (these are sent from the central server to the local hall)
        LB_NOTIFY_GAME_BUY_IN = 27500,
        LB_NOTIFY_GAME_START_PENDING = 27501,
        LB_NOTIFY_GAME_START_SEND_FINAL_SALES = 27502,
        LB_NOTIFY_GAME_START = 27503,
        LB_NOTIFY_GAME_END = 27504,
        LB_NOTIFY_GAME_START_MISSING_X_PLAYERS = 27505,
        LB_NOTIFY_GAME_START_IN_X_SECONDS = 27506,
        LB_NOTIFY_GAME_BALL_CALL = 27507,
        LB_NOTIFY_GAME_STARTING = 27508,
        LB_NOTIFY_GAME_WIN_CARD_NOS_AND_AMOUNTS = 27509,
        LB_NOTIFY_GAME_TEST_BUY_CARDS = 27510,
        LB_NOTIFY_GAME_START_SEND_CURRENT_SALES = 27511,
        LB_NOTIFY_GAME_SEND_HALL_FINAL_SALES = 27512,
        LB_NOTIFY_GAME_SEND_CARD_WIN = 27513,
        LB_NOTIFY_GAME_SHOW_CARDS = 27514,
        LB_NOTIFY_GAME_FULL_GAME_INFO = 27515,

        /* Linked Bingo Local Module */
        LBHALL_EXIST = 28000,
        LBHALL_GET_BUY_OPTIONS = 28001,
        LBHALL_BUY_CARD = 28002,
        LBHALL_GET_CURRENT_CARDS = 28003,
        LBHALL_CANCEL_CARD_PLAY = 28004,
        LBHALL_RECONNECT_CENTRAL_SERVER = 28005,
        LBHALL_GET_CUR_GAME = 28006,
        LBHALL_GET_PREVIOUS_GAME_PLAYER_CARDS = 28007,
        LBHALL_INIT_GAME = 28008,
        LBHALL_SET_PRIZE = 28009,
        LBHALL_BALL_CALL = 28010,
        LBHALL_GAME_LOCKOUT = 28011,
        LBHALL_UPDATE_WINNERS = 28012,
        LBHALL_UK_BUY_CARD = 28013,
        LBHALL_UK_MCB_GET_FINAL_CARD_LIST = 28014,
        LBHALL_REFUND_GAME = 28015,
        LBHALL_CB_GET_PLAYER_STATS = 28016,

        /* Poker Module */
        POKER_EXIST = 29000,
        POKER_GET_GAME_DEF = 29001,
        POKER_GAME_START = 29002,
        POKER_GAME_COMPLETE = 29003,
        POKER_GET_LAST_PLAY = 29004,

        /* Keno Module */
        KENO_EXIST = 30000,
        KENO_GET_GAME_DEFINITION = 30001,
        KENO_GET_LAST_PLAY = 30002,
        KENO_PLAY_KENO = 30003,

        /* System Events */
        SYSEVENTS_EXIST = 31000,
        SYSEVENTS_CHECK_MSG = 31001,
        SYSEVENTS_PLAY_POKER_FROM_MAC = 31002,
        SYSEVENTS_ADD_EVENT_TRANSACTION = 31003,
        SYSEVENTS_ADD_EXCEPTION_HISTORY = 31004,

        /* UK Module */
        UK_EXIST = 32000,
        UK_SET_SESSION = 32001,
        UK_ADD_PRODUCT = 32002,
        UK_CREATE_MENU = 32003,
        UK_SET_MSGAME_STATE = 32004,
        UK_GET_PACKAGE_OVERRIDE = 32005,
        UK_SET_PACKAGE_OVERRIDE = 32006,
        UK_DELETE_PACKAGE_OVERRIDE = 32007,
        UK_GET_PERM_DEF = 32008,
        UK_SET_PERM_DEF = 32009,
        UK_DELETE_PERM_DEF = 32010,
        UK_GET_CARD_FACE = 32011,
        UK_ADD_BINGO_CARD_SALE = 32012,
        UK_SEND_SALES_BSS_SERVER = 32013,
        UK_GET_CURRENT_PLAYER_CARDS = 32014,
        UK_GET_CURRENT_RECEIPT_DATA = 32015,
        UK_SET_CBGAME_STATE = 32016,
        UK_NO_SESSION_UPDATE = 32017,
        UK_SEND_MCB_SALES_BSS_SERVER = 32018,
        UK_SEND_MCB_FINAL_SALES_BSS = 32019,
        UK_MCB_WIN_CLAIM = 32020,
        UK_MCB_WIN_NOTICE = 32021,
        UK_SET_JACKPOT_INDEX = 32022,
        UK_SEND_JACKPOT_SALES = 32023,
        UK_REQUEST_JACKPOT_STAMP = 32024,
        UK_SET_JACKPOT_STAMPS = 32025,
        UK_MS_GET_PLAYER_STATS = 32026,
        UK_GET_CUR_PAGE = 32027,

        /* Blackjack Module */
        BLACKJACK_EXIST = 33000,
        BLACKJACK_GET_GAME_DEF = 33001,

        /* AT2 Module */
        //US790,
        AT2_EXIST = 34000,
        AT2_GET_PTECH_PROGRAMS = 34001,
        AT2_GET_SESSION = 34002,
        AT2_SELL_DEVICE = 34003,
        AT2_VOID_SALE = 34004,

        /* Test Module */
        //US1130,
        TEST_MODULE_EXIST = 35000,
        TEST_GET_AVAILABLE_SCRIPTS = 35001,
        TEST_RUN_SCRIPT = 35002,
        TEST_GET_UNASSIGNED_PACK = 35003,

        /* Inventory Module Messages */
        INVENTORY_MODULE_EXIST = 36000,
        INVENTORY_GET_VENDORS = 36001,
        INVENTORY_SET_VENDOR = 36002,
        INVENTORY_GET_MANUFACTURER = 36003,
        INVENTORY_GET_INV_LOCATIONS = 36004,
        INVENTORY_SET_INV_LOCATIONS = 36005,
        INVENTORY_DELETE_INV_LOCATIONS = 36006,
        INVENTORY_GET_PRODUCT_LIST = 36007,
        INVENTORY_GET_INVENTORY_LIST = 36008,
        INVENTORY_GET_INVENTORY_DATA = 36009,
        INVENTORY_SET_INVENTORY_DATA = 36010,
        INVENTORY_GET_INVENTORY_CT_BY_LOCATION = 36011,
        INVENTORY_RECONCILE_TRANSACTION = 36012,
        INVENTORY_RETIRE = 36013,
        INVENTORY_GET_ISSUE_NAMES = 36014,
        INVENTORY_SET_ISSUE_NAME = 36015,
        INVENTORY_GET_ISSUE_DATA = 36016,
        INVENTORY_GET_TEMPLATE = 36017,
        INVENTORY_SET_TEMPLATE = 36018,
        INVENTORY_DELETE_TEMPLATE_DETAIL = 36019,
        INVENTORY_GET_INVENTORY_ITEM_TRANS = 36020,
        INVENTORY_CHECK_INVENTORY_AVAILABILITY = 36021,
        INVENTORY_SET_INVENTORY_MANUFACTURER = 36022,
        INVENTORY_SET_DEFAULT_INV_LOCATION = 36023,
        INVENTORY_DELETE_TEMPLATE = 36024,
        INVENTORY_DATA_BY_UPC = 36025,
        INVENTORY_ISSUE_TRANSACTION = 36026,
        INVENTORY_ADJUSTMENT_TRANSACTION = 36027,
        INVENTORY_MOVE_TRANSACTION = 36028,
        INVENTORY_RECEIPT_TRANSACTION = 36029,
        INVENTORY_GET_AUDIT_NUMS_ISSUED = 36030,
        INVENTORY_GET_MODIFIED_ITEMS = 36031,
        INVENTORY_TRANSFER_TRANSACTION = 36032,
        INVENTORY_GET_MERCHANDISE_ITEMS = 36033,
        INVENTORY_GET_SERIAL_NUMBERS = 36034,
        INVENTORY_GET_ITEM_GAME_CATEGORY = 36035,
        INVENTORY_SET_EXCEPTION_DATA = 36036,
        INVENTORY_GET_EXCEPTION_DATA = 36037,
        INVENTORY_SET_PULLTAB_TIERS = 36038,
        INVENTORY_GET_PULLTAB_TIERS = 36039,
        INVENTORY_GET_ISSUED_SESSIONS = 36040,
        INVENTORY_INVOICE_RECEIVED = 36041,
        INVENTORY_INVOICE_GET_LIST = 36042,
        INVENTORY_SET_CARD_COLOR_SET = 36043,
        INVENTORY_GET_MACHINE_PAPER_USAGE = 36044,
        INVENTORY_SET_MACHINE_PAPER_USAGE = 36045,
        INVENTORY_GET_PAPER_EXCHANGE_DATA = 36046,
        INVENTORY_UPDATE_MACHINE_PAPER_USAGE = 36047,
        INVENTORY_EXCHANGE_PAPER_PACK = 36048,
        INVENTORY_GET_ITEM_BY_SERIAL_AUDIT = 36049,
        INVENTORY_GET_CARD_COLOR_SETS = 36050,

        /* Money Module Messages */
        MONEY_MODULE_EXIST = 37000,
        // TA7451 Moved currency messages from management to Money module
        MONEY_GET_CURRENCY_LIST = 37001,
        MONEY_SET_CURRENCY_DEFINITIONS = 37002,
        // TA7456 Adding support for getting and setting the daily exchange rates
        MONEY_GET_DAILY_EXCHANGE_RATES = 37003,
        MONEY_SET_DAILY_EXCHANGE_RATES = 37004,
        MONEY_BANK_ISSUE = 37005,
        MONEY_SET_BANK_TEMPLATE = 37006,
        MONEY_GET_BANK_TEMPLATE = 37007,
        MONEY_GET_OPEN_BANK_LIST = 37008,
        MONEY_BANK_DROP = 37009,
        MONEY_VOID_CASH_TRANSACTION = 37010,
        MONEY_PROMPT_FOR_INITIAL_BANK = 37011,
        MONEY_GET_CURRENT_BANK_AMOUNT = 37012,
        MONEY_GET_TRANS_LIST = 37013,
        MONEY_GET_CASH_TRANS_DETAIL_DATA = 37014,
        MONEY_GET_PREVIOUS_BANK = 37015,
        MONEY_GET_PAYOUT_GAME_LIST = 37016,
        MONEY_SET_SESSION_PAYOUT_SETTINGS = 37017,
        MONEY_PAYOUT_BINGO_WINNERS = 37018,
        MONEY_GET_BINGO_PAYOUT_DETAIL = 37019,
        MONEY_ADD_PLAYER_TAX_FORM = 37020,
        MONEY_GET_PLAYER_TAX_FORM = 37021,
        MONEY_FIND_PLAYER_TAX_FORMS = 37022,
        MONEY_GET_PAYOUT_CHECK_LIST = 37023,
        MONEY_SET_PAYOUT_CHECK_INFO = 37024,
        MONEY_VOID_PAYOUT_TRANSACTION = 37025,
        MONEY_GET_TX_OCCASION_PRIZE_PAYOUTS = 37026,
        MONEY_SET_TX_OCCASION_PRIZE_PAYOUTS = 37027,
        MONEY_GET_OCCASION_OPERATOR_DATA = 37028,
        MONEY_GET_OCCASION_SCHEDULE_TYPES = 37029,
        MONEY_GET_OCCASION_LIST = 37030,
        MONEY_SET_CASH_TRANS_DETAIL_DATA = 37031,
        MONEY_GET_STAFF_BANK_LIST = 37032,
        MONEY_GET_TENDER_TYPES = 37033,
        MONEY_SET_TENDER_TYPE_STATUS = 37034,
        MONEY_GET_STAFF_TOTAL_DUE = 37035,
        MONEY_CHECK_FOR_CLOSED_BANK = 37036,
        MONEY_REOPEN_BANK = 37037,
        MONEY_GET_TENDER_SUBTYPES = 37038,
        MONEY_SET_TENDER_SUBTYPE_DISPLAY_NAME = 37039,
        MONEY_GET_POS_BANK_DENOM_COUNTS = 37040,
        MONEY_GET_AVAILABLE_STAFF_BANKS = 37041,

        /* Update Module */
        UPDATE_MODULE_EXIST = 38000,
        UPDATE_GET_PACKAGE_HEADER = 3800,
        UPDATE_GET_MODULE_BITMAPS = 3800,
        UPDATE_GET_PACKAGE_FILE_DATA = 3800,

        /* B3 Modle */
        B3_MODULE_EXIST = 39000,
        B3_GET_GAME_PATTERNS = 39001,
        B3_GET_PATTERN_MASKS = 39002,
        B3_GET_GAME_PAYOUTS = 39003,
        B3_GET_SYSTEM_SETTINGS = 39004,
        B3_GET_SESSION_LIST = 39005,
        B3_GET_OPERATOR_LIST = 39006,
        B3_GET_REPORT_LIST = 39007,
        B3_GET_GAMES = 39008,
        B3_SET_GAME_STATE = 39009,
        B3_SET_SYSTEM_SETTINGS = 39010,
        B3_PLAYER_GET_B3_ACCOUNT_NUMBER = 39011,
        B3_PLAYER_GET_CLIENT_NAME = 39020,
        B3_PLAYER_GET_CONFIG = 39021,
        B3_PLAYER_CHECK_SESSION_ACTIVE = 39022,
        B3_PLAYER_CHECK_ACCOUNT_NUMBER = 39023,
        B3_PLAYER_CHECK_ACCEPT_WAGER = 39024,
        B3_PLAYER_GET_CREDIT = 39025,
        B3_PLAYER_SET_CREDIT = 39026,
        B3_PLAYER_SET_CREDIT_DOUBLE_ACCOUNT = 39027,
        B3_PLAYER_GET_ACCOUNT_STATUS = 39028,
        B3_PLAYER_CASH_OUT = 39029,
        B3_PLAYER_CLEAR_HAND_PAY_AMOUNT = 39030,
        B3_PLAYER_CLEAR_TAXABLE_AMOUNT = 39031,
        B3_PLAYER_RELEASE_ACCOUNT = 39032,
        B3_PLAYER_GET_PLAYER_POINTS = 39033,
        B3_PLAYER_FIND_PLAYER_CARD = 39034,
        B3_PLAYER_GET_PLAYER_CARD_INFO = 39035,
        B3_PLAYER_GET_CREDIT_ACCOUNTS = 39036,
        B3_PLAYER_CREDIT_GAME_PLAY = 39037,
        B3_PLAYER_CREDIT_GAME_WIN = 39038,
        B3_CENTER_SESSION_START = 39050,
        B3_CENTER_SESSION_END = 39051,
        B3_CENTER_SET_BALLS = 39052,
        B3_CENTER_GET_BALLS = 39053,
        B3_CENTER_GET_ICON_COLORS = 39054,
        B3_CENTER_SET_OPERATOR_DATA = 39055,
        B3_CENTER_GET_SESSION_ACCOUNTS = 39056,
        B3_CENTER_GET_MATH_PACKAGES = 39057,
        B3_SALES_CREATE_ACCOUNT = 39060,
        B3_SALES_GET_ACCOUNT_INFO = 39061,
        B3_SALES_CANCEL_TRANSACTION = 39062,
        B3_SALES_UNLOCK_ACCOUNT = 39063,
        B3_SALES_GET_ACCOUNT_JACKPOT_INFO = 39064,
        B3_SALES_REDEEM_ACCOUNT = 39065,
        B3_SALES_GET_SESSION_TICKET_COUNT = 39066,
        B3_SALES_VOID_SESSION_TICKETS = 39067,
        // B3_CENTER_SESSION_INFO = 39052,
        B3_PLAYER_CB_GET_GAME_SETTINGS = 39100,
        B3_PLAYER_CB_GET_GAME_PATTERNS = 39101,
        B3_PLAYER_CB_GET_GAME_PAYTABLE = 39102,
        B3_PLAYER_CB_GET_GAME_BALLS = 39103,
        B3_PLAYER_CB_GET_GAME_CARDS = 39104,
        B3_PLAYER_CB_SET_GAME_RESULT = 39105,
        B3_PLAYER_CB_GET_BONUS_GAME_PATTERNS = 39106,
        B3_PLAYER_CB_GET_BONUS_GAME_PAYTABLE = 39107,
        B3_PLAYER_CB_GET_BONUS_GAME_BALLS = 39108,
        B3_PLAYER_CB_GET_BONUS_GAME_CARDS = 39109,
        B3_PLAYER_CB_SET_BONUS_GAME_RESULT = 39110,
        B3_PLAYER_CB_UPDATE_SESSION_TOTALS = 39111,
        B3_PLAYER_MM_GET_GAME_SETTINGS = 39200,
        B3_PLAYER_MM_GET_GAME_PATTERNS = 39201,
        B3_PLAYER_MM_GET_GAME_PAYTABLE = 39202,
        B3_PLAYER_MM_GET_GAME_BALLS = 39203,
        B3_PLAYER_MM_GET_GAME_CARDS = 39204,
        B3_PLAYER_MM_SET_GAME_RESULT = 39205,
        B3_PLAYER_MM_UPDATE_SESSION_TOTALS = 39206,
        B3_PLAYER_WB_GET_GAME_SETTINGS = 39300,
        B3_PLAYER_WB_GET_GAME_PATTERNS = 39301,
        B3_PLAYER_WB_GET_GAME_PAYTABLE = 39302,
        B3_PLAYER_WB_GET_GAME_BALLS = 39303,
        B3_PLAYER_WB_GET_GAME_CARDS = 39304,
        B3_PLAYER_WB_SET_GAME_RESULT = 39305,
        B3_PLAYER_WB_GET_BONUS_GAME_PATTERNS = 39306,
        B3_PLAYER_WB_GET_BONUS_GAME_PAYTABLE = 39307,
        B3_PLAYER_WB_GET_BONUS_GAME_BALLS = 39308,
        B3_PLAYER_WB_GET_BONUS_GAME_CARDS = 39309,
        B3_PLAYER_WB_SET_BONUS_GAME_RESULT = 39310,
        B3_PLAYER_WB_UPDATE_SESSION_TOTALS = 39311,

        /* Bingo Monitor Module */
        BINGO_MONITOR_MODULE_EXISTS = 40000,
        MACHINE_GAME_CARD_STATUS = 4000,

        /* Auto Bingo Module */
        AUTO_BINGO_MODULE_EXISTS = 4200,

        /* Linked Session Bingo Module */
        SESSIONBINGOLINK_MODULE_EXIST = 43000,
        SESSIONBINGOLINK_GET_LINK_CLIENTS_STATE = 43001,
        SESSIONBINGOLINK_FINALIZE_CARD_VERIFY = 43002,

    }

    /// <summary>
    /// The abstract base class from which all message to the 
    /// GTIServer should derive.  Inheritors should set the id
    /// field of the message before calling Send.  This class sends
    /// "raw" type GTIServer messages.
    /// </summary>
    public abstract class ServerMessage
    {
        #region Member Variables
        protected int m_id = 0;
		protected string m_strMessageName = "";
		protected byte[] m_requestPayload = null;
        protected byte[] m_responsePayload = null;
        protected int m_returnCode = (int)GTIServerReturnCode.GeneralError;
        #endregion

        #region Member Methods
        /// <summary>
        /// Prepares the request to be sent to the server.  All subclasses must
        /// implement this method.
        /// </summary>
        protected abstract void PackRequest();

        /// <summary>
        /// Parses the response received from the server.  Subclasses should
        /// override this method if more than the return code is send from the
        /// server.  When overriding UnpackResponse in a derived class, you can
        /// call the base class's UnpackResponse method to parse the 
        /// return code.
        /// </summary>
        /// <exception cref="GTI.Modules.Shared.ServerCommException">Thrown when
        /// the server failed to respond.</exception>
        /// <exception cref="GTI.Modules.Shared.ServerException">Thrown in case 
        /// of any error or an unsuccessful return code.</exception>
        protected virtual void UnpackResponse()
        {
            // Check to see if we got the payload correctly.
            if(m_responsePayload == null)
                throw new ServerCommException("Server communication lost.");
                
            if(m_responsePayload.Length < sizeof(int))
                throw new MessageWrongSizeException("Message payload size is too small.");

            // Check the return code.
            m_returnCode = BitConverter.ToInt32(m_responsePayload, 0);

            if(m_returnCode != (int)GTIServerReturnCode.Success)
                throw new ServerException((GTIServerReturnCode)m_returnCode, "Server Error Code: " + m_returnCode.ToString());
        }

        /// <summary>
        /// Packs the request, sends the message to the server, then
        /// unpacks the response.
        /// </summary>
        public virtual void Send()
        {
            // Prepare the request.
            PackRequest();

            // Box the response.
            object response = (object)m_responsePayload;

            // Create an instance of the comm. interface.
            ModuleComm comm = new ModuleComm();
            comm.SendMessageSync(m_id, (object)m_requestPayload, out response, 0);

            // Unbox the response.
            m_responsePayload = (byte[])response;

            // Parse the response.
            UnpackResponse();
        }
        #endregion

        #region Static Methods
        /// <summary>
        /// Writes a string to the specified BinaryWriter in a format the
        /// server expects.
        /// </summary>
        /// <param name="writer">The BinaryWriter to write to.</param>
        /// <param name="data">The string to write.</param>
        /// <exception cref="System.ArgumentNullException">writer is a null
        /// reference.</exception>
        /// <exception cref="System.IO.IOException">An I/O error
        /// occurred.</exception>
        /// <exception cref="System.ObjectDisposedException">The stream is
        /// closed.</exception>
        protected static void WriteString(BinaryWriter writer, string data)
        {
            if (writer == null)
                throw new ArgumentNullException("writer");

            if (!string.IsNullOrEmpty(data))
            {
                writer.Write((ushort)data.Length);
                writer.Write(data.ToCharArray());
            }
            else
            {
                writer.Write((ushort)0);
            }
        }

        /// <summary>
        /// Writes a date/time to the specified BinaryWriter in a format the
        /// server expects.
        /// </summary>
        /// <param name="writer">The BinaryWriter to write to.</param>
        /// <param name="data">The DateTime to write.</param>
        /// <exception cref="System.ArgumentNullException">writer is a null
        /// reference.</exception>
        /// <exception cref="System.IO.IOException">An I/O error
        /// occurred.</exception>
        /// <exception cref="System.ObjectDisposedException">The stream is
        /// closed.</exception>
        protected static void WriteDateTime(BinaryWriter writer, DateTime data)
        {
            if (writer == null)
                throw new ArgumentNullException("writer");

            string tempDate = data.ToString("MM/dd/yyyy HH:mm:ss", CultureInfo.InvariantCulture);
            writer.Write((ushort)tempDate.Length);
            writer.Write(tempDate.ToCharArray());
        }

        /// <summary>
        /// Writes a date/time to the specified BinaryWriter in a format the
        /// server expects.
        /// </summary>
        /// <param name="writer">The BinaryWriter to write to.</param>
        /// <param name="data">The DateTime to write.</param>
        /// <exception cref="System.ArgumentNullException">writer is a null
        /// reference.</exception>
        /// <exception cref="System.IO.IOException">An I/O error
        /// occurred.</exception>
        /// <exception cref="System.ObjectDisposedException">The stream is
        /// closed.</exception>
        protected static void WriteDateTime(BinaryWriter writer, DateTime? data)
        {
            if(writer == null)
                throw new ArgumentNullException("writer");

            if(data.HasValue)
                WriteDateTime(writer, data.Value);
            else
                writer.Write((ushort)0);
        }

        /// <summary>
        /// Writes a decimal to the specified BinaryWriter in a format the
        /// server expects.
        /// </summary>
        /// <param name="writer">The BinaryWriter to write to.</param>
        /// <param name="data">The decimal to write.</param>
        /// <param name="format">A standard or custom numeric format
        /// string.</param>
        /// <exception cref="System.ArgumentNullException">writer is a null
        /// reference.</exception>
        /// <exception cref="System.IO.IOException">An I/O error
        /// occurred.</exception>
        /// <exception cref="System.ObjectDisposedException">The stream is
        /// closed.</exception>
        /// <remarks>If format is null or empty, a default of F2 is
        /// used.</remarks>
        protected static void WriteDecimal(BinaryWriter writer, decimal data, string format)
        {
            if (writer == null)
                throw new ArgumentNullException("writer");

            string tempDec = data.ToString(string.IsNullOrWhiteSpace(format) ? "F2" : format, CultureInfo.InvariantCulture);
            writer.Write((ushort)tempDec.Length);
            writer.Write(tempDec.ToCharArray());
        }

        /// <summary>
        /// Reads a string from the BinaryReader.
        /// </summary>
        /// <param name="reader">The BinaryReader to read from.</param>
        /// <returns>A string instance or null.</returns>
        /// <exception cref="System.ArgumentNullException">reader is a null
        /// reference.</exception>
        /// <exception cref="System.IO.EndOfStreamException">The end of the
        /// stream was reached.</exception>
        /// <exception cref="System.IO.IOException">An I/O error
        /// occurred.</exception>
        /// <exception cref="System.ObjectDisposedException">The stream is
        /// closed.</exception>
        protected static string ReadString(BinaryReader reader)
        {
            if (reader == null)
                throw new ArgumentNullException("reader");

            ushort stringLen = reader.ReadUInt16();

            if (stringLen > 0)
                return new string(reader.ReadChars(stringLen));
            else
                return null;
        }

        /// <summary>
        /// Reads a DateTime from the BinaryReader.
        /// </summary>
        /// <param name="reader">The BinaryReader to read from.</param>
        /// <returns>A valid DateTime or null if there was no date.</returns>
        /// <exception cref="System.ArgumentNullException">reader is a null
        /// reference.</exception>
        /// <exception cref="System.IO.EndOfStreamException">The end of the
        /// stream was reached.</exception>
        /// <exception cref="System.IO.IOException">An I/O error
        /// occurred.</exception>
        /// <exception cref="System.ObjectDisposedException">The stream is
        /// closed.</exception>
        protected static DateTime? ReadDateTime(BinaryReader reader)
        {
            if (reader == null)
                throw new ArgumentNullException("reader");

            ushort stringLen = reader.ReadUInt16();

            if (stringLen > 0)
                return DateTime.Parse(new string(reader.ReadChars(stringLen)), CultureInfo.InvariantCulture);
            else
                return null;
        }

        /// <summary>
        /// Reads a decimal from the BinaryReader.
        /// </summary>
        /// <param name="reader">The BinaryReader to read from.</param>
        /// <returns>A valid decimal or null if there was no data.</returns>
        /// <exception cref="System.ArgumentNullException">reader is a null
        /// reference.</exception>
        /// <exception cref="System.IO.EndOfStreamException">The end of the
        /// stream was reached.</exception>
        /// <exception cref="System.IO.IOException">An I/O error
        /// occurred.</exception>
        /// <exception cref="System.ObjectDisposedException">The stream is
        /// closed.</exception>
        protected static decimal? ReadDecimal(BinaryReader reader)
        {
            if (reader == null)
                throw new ArgumentNullException("reader");

            ushort stringLen = reader.ReadUInt16();

            if (stringLen > 0)
                return decimal.Parse(new string(reader.ReadChars(stringLen)), CultureInfo.InvariantCulture);
            else
                return null;
        }

        /// <summary>
        /// Writes a decimal value to the BinaryWriter
        /// </summary>
        /// <param name="writer">The BinaryWriter to write to.</param>
        /// <param name="data"></param>
        protected static void WriteDecimal(BinaryWriter writer, decimal data)
        {
            WriteString(writer, data.ToString());
        }
        
        /// <summary>
        /// Writes a nullable int to the output stream
        /// </summary>
        /// <param name="value"></param>
        /// <param name="stream"></param>
        public static void WriteNullableInt(BinaryWriter writer, int? value)
        {
            writer.Write((bool)value.HasValue);
            if (value.HasValue)
                writer.Write((int)value.Value);
        }

        /// <summary>
        /// reads a nullable int from the input stream
        /// </summary>
        /// <param name="stream"></param>
        /// <returns></returns>
        public static int? ReadNullableInt(BinaryReader reader)
        {
            if (reader.ReadBoolean())
                return reader.ReadInt32();
            return null;
        }

        /// <summary>
        /// Writes a nullable int to the output stream
        /// </summary>
        /// <param name="value"></param>
        /// <param name="stream"></param>
        public static void WriteNullableByte(BinaryWriter writer, byte? value)
        {
            writer.Write((bool)value.HasValue);
            if (value.HasValue)
                writer.Write((byte)value.Value);
        }

        /// <summary>
        /// reads a nullable int from the input stream
        /// </summary>
        /// <param name="stream"></param>
        /// <returns></returns>
        public static byte? ReadNullableByte(BinaryReader reader)
        {
            if (reader.ReadBoolean())
                return reader.ReadByte();
            return null;
        }
        #endregion

        #region Member Properties
        /// <summary>
        /// Gets the id of the server message.
        /// </summary>
        public int Id
        {
            get
            {
                return m_id;
            }
        }

        /// <summary>
        /// Gets the return code received from the server.
        /// </summary>
        public int ReturnCode
        {
            get
            {
                return m_returnCode;
            }
        }

		/// <summary>
		/// Used to return descriptive error messages
		/// </summary>
		public string MessageName
		{
			get
			{
				if (m_strMessageName.Length > 0)
					return m_strMessageName;
				else
					return Convert.ToString(m_id);
			}
		}

		/// <summary>
		/// Used to eliminate the need for (int) casts
		/// </summary>
		public GTIServerReturnCode ServerReturnCode
		{
			get { return (GTIServerReturnCode)m_returnCode; }
		}
		#endregion
    }
}
